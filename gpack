#!/bin/bash
# GPack Package Manager
# Package Manager Interface
# $Id: gpack,v 1.17 2005/07/21 11:58:44 nymacro Exp $

########################################################################
#
# Copyright 2005
# Aaron Marks.
#
# GPack is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# GPack is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with GPack; see the file COPYING.  If not, write to the Free
# Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA  
# 02110-1301, USA.
#
########################################################################

if ! . ./gpack.sh ; then
    echo "ERROR: Could not find GPack internals (gpack.sh)."
    exit 1
fi

ARGS=(`echo $@`)

for (( i=0 ; $i < $# ; i=$i+1 )) ; do
    case "${ARGS[$i]}" in
	--no-deps|-n)
	    warn "Disabling dependancy checking"
	    FORCE_NO_DEPS=yes
	    unset ARGS[$i]
	    ;;
	--overwrite|-o)
	    warn "Force overwrite enabled"
	    FORCE_OVERWRITE=yes
	    unset ARGS[$i]
	    ;;
	--keep|-k)
	    warn "Keep existing files on system enabled"
	    FORCE_KEEP=yes
	    unset ARGS[$i]
	    ;;
	--strip|-s)
	    warn "Stripping debug symbol information enabled"
	    FORCE_STRIP_DEBUG=yes
	    unset ARGS[$i]
	    ;;
	--verbose|-v)
	    warn "Using verbose mode"
	    VERBOSE=yes
	    unset ARGS[$i]
	    ;;
	--root=*)
	    PKG_ROOT_DIR=`echo ${ARGS[$i]} | sed -e 's/\(.*\)=\(.*\)/\2/'`
	    warn "Using $PKG_ROOT_DIR as root installation directory"
	    ;;
	--config=*)
	    PKG_CONF_DIR=`echo ${ARGS[$i]} | sed -e 's/\(.*\)=\(.*\)/\2/'`
	    warn "Using $PKG_CONF_DIR as configuration directory"
	    ;;
	--built=*)
	    PKG_PACKAGE_DIR=`echo ${ARGS[$i]} | sed -e 's/\(.*\)=\(.*\)/\2/'`
	    warn "Using $PKG_PACKAGE_DIR as build package directory"
	    ;;
	--source=*)
	    PKG_SOURCE_DIR=`echo ${ARGS[$i]} | sed -e 's/\(.*\)=\(.*\)/\2/'`
	    warn "Using $PKG_SOURCE_DIR as downloaded source code directory"
	    ;;
	--temp=*)
	    PKG_TEMP_DIR=`echo ${ARGS[$i]} | sed -e 's/\(.*\)=\(.*\)/\2/'`
	    warn "Using $PKG_TEMP_DIR as temporary directory"
	    ;;
	--log=*)
	    PKG_TEMP_DIR=`echo ${ARGS[$i]} | sed -e 's/\(.*\)=\(.*\)/\2/'`
	    warn "Using $PKG_LOG as log file"
	    ;;
	*)
	    if [ -z "$COMMAND" ]; then
		COMMAND=${ARGS[$i]}
		unset ARGS[$i]
	    fi
	    ;;
    esac
done

case "$COMMAND" in
    build)
	for i in "${ARGS[@]}"; do
	    TMP=`pkg_find $i`
	    [ -z "$TMP" ] && error "No package ($i) found"
	    pkg_build "$TMP"
	done
	;;
    install)
	for i in "${ARGS[@]}"; do
	    TMP=`pkg_find_bin $i`
	    [ -z "$TMP" ] && error "No package ($i) found"
	    pkg_install "$TMP"
	done
	;;
    remove)
	for i in "${ARGS[@]}"; do
	    pkg_remove $i
	done
	;;
    depinst)
	for i in "${ARGS[@]}"; do
	    pkg_depinst "$i"
	done
	;;
    info)
	for i in "${ARGS[@]}"; do
	    TMP=`pkg_find $i`
	    [ -z "$TMP" ] && error "No package ($i) found"
	    pkg_info "$TMP"
	done
	;;
    sync)
	echo "Syncing packages not implemented yet"
	;;
    list)
	find $PKG_FILE_DIR | grep "$PKG_FILE\$" | sed -e "s|.*/\(.*\)\.$PKG_FILE|\1|"
	;;
    installed)
	ls -1 $PKG_CONF_DIR
	;;
    clean)
	for i in "${ARGS[@]}"; do
	    rm `pkg_find_bin $i` || echo "Nothing to clean"
	done
	;;
    rebuild)
	for i in "${ARGS[@]}"; do
	    sh $0 clean $i
	    sh $0 build $i
	done
	;;
    find)
	for i in "${ARGS[@]}"; do
	    pkg_find $i
	done
	;;
    depends)
	for i in "${ARGS[@]}"; do
	    TMP="$PKG_TEMP_DIR/gpack-depends"
	    (
		trap "rm $TMP && return 0" TERM HUP INT
		pkg_depends $i "$TMP"
	    ) || rm "$TMP"
	done
	;;
    deptree)
	for i in "${ARGS[@]}"; do
	    pkg_dependstree $i
	done
	;;
    update)
	for i in "${ARGS[@]}"; do
	    if pkg_build `pkg_find $i` ; then
		TMP=`pkg_find_bin $i`
		if [ -e "$TMP" ]; then
		    pkg_remove "$i"
		    pkg_install "$TMP"
		fi
	    fi
	done
	;;
    sysup)
	echo "System update not implemented yet. Coming soon."
	;;
    diff)
	for i in `ls -1 $PKG_CONF_DIR`; do
	    INSTALLED=$(pkg_version $PKG_CONF_DIR/$i/$PKG_FILE)
	    AVAILABLE=$(pkg_version $(pkg_find $i))
	    if [ ! "$INSTALLED" == "$AVAILABLE" ]; then
		echo "Name            Version         Available" 1>&2
		printf "%-8s\t%-8s\t%-8s\n" "$i" "$INSTALLED" "$AVAILABLE"
	    fi
	done
	;;
    *)
	echo "GPack $VERSION - Aaron Marks 2005 - See COPYING for license details"
	echo "usage:  $0 <command> [<argument>*]"
	echo "    commands:"
	echo "        build             build package"
	echo "        install           install package"
	echo "        remove            remove package"
	echo "        depinst           install package and all dependancies"
	echo "        info              print package information"
	echo "        list              list available packages"
	echo "        installed         list installed packages"
	echo "        find              find package"
	echo "        rebuild           build a package from scratch"
	echo "        clean             clean up a package"
	echo "        depends           list dependancies for package"
	echo "        deptree           draw dependancy tree for package"
	echo "        update            update package"
	echo "        diff              list different installed package versions"
	echo
	echo "    options:"
	echo "        -o --overwrite    overwrite existing files in installation"
	echo "        -k --keep         keep existing files on system"
	echo "        -n --no-deps      disable dependancy checking"
	echo "        -s --strip        strip debugging information from package"
	echo "        -v --verbose      verbose mode"
	echo "        --root=<dir>      set installation root directory to directory"
	echo "        --config=<dir>    set configuration directory to director"
	echo "        --built=<dir>     set built package directory to directory"
	echo "        --source=<dir>    set downloaded source directory to directory"
	echo "        --temp=<dir>      set temporary directory to directory"
	echo "        --log=<file>      set log file to file"
	;;
esac
